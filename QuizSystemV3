

import java.util.*;

// ================= Interface =================
interface User {
    void collectDetails(Scanner sc);
}

// ================= Model: Question =================
class Question {
    private String questionText;
    private List<String> options;
    private int correctAnswer;

    public Question(String questionText, List<String> options, int correctAnswer) {
        this.questionText = questionText;
        this.options = new ArrayList<>(options);
        this.correctAnswer = correctAnswer;
    }

    public String getQuestionText() { return questionText; }
    public List<String> getOptions() { return options; }
    public boolean isCorrect(int index) { return index == correctAnswer; }
    public String getCorrectAnswer() { return options.get(correctAnswer); }

    public void shuffleOptions() {
        String correctOpt = options.get(correctAnswer);
        Collections.shuffle(options);
        correctAnswer = options.indexOf(correctOpt);
    }
}

// ================= Model: SubjectQuiz =================
class SubjectQuiz {
    private final String subjectName;
    private final List<Question> questions = new ArrayList<>();

    public SubjectQuiz(String name) { this.subjectName = name; }
    public String getSubjectName() { return subjectName; }
    public List<Question> getQuestions() { return questions; }
    public void addQuestion(Question q) { questions.add(q); }
}

// ================= Database: Subjects =================
class SubjectDatabase {
    private static final Map<Integer, SubjectQuiz> subjectsByIndex = new LinkedHashMap<>();
    private static final Map<String, SubjectQuiz> subjectsByName = new HashMap<>();
    private static int counter = 1;

    public static SubjectQuiz addSubject(String name) {
        SubjectQuiz s = new SubjectQuiz(name);
        subjectsByIndex.put(counter++, s);
        subjectsByName.put(name.toLowerCase(), s);
        return s;
    }

    public static SubjectQuiz getByChoice(int choice) { return subjectsByIndex.get(choice); }
    public static SubjectQuiz getByName(String name) { return subjectsByName.get(name.toLowerCase()); }
    public static void printSubjectList() { subjectsByIndex.forEach((k,v)->System.out.println(k+") "+v.getSubjectName())); }
    public static int subjectCount() { return subjectsByIndex.size(); }
}

// ================= Model: Student =================
class Student implements User {
    private String name;
    public Student(String name){ this.name=name; }
    public String getName(){ return name; }

    @Override
    public void collectDetails(Scanner sc) {
        System.out.print("Enter Student Name: ");
        name = sc.nextLine().trim();
    }
}

// ================= Database: Students =================
class StudentDatabase {
    private static final Set<String> students = new TreeSet<>(String.CASE_INSENSITIVE_ORDER);

    public static boolean addStudent(String name) {
        if(name==null || name.trim().isEmpty()) return false;
        return students.add(name.trim());
    }

    public static boolean exists(String name){ return students.contains(name); }
    public static List<String> allStudents(){ return new ArrayList<>(students); }
}

// ================= Model: Teacher =================
class Teacher implements User {
    private String username;
    private String password;
    private final Set<String> subjectNames = new HashSet<>();

    public Teacher(String username, String password, Collection<String> subjects){
        this.username=username;
        this.password=password;
        if(subjects!=null) subjectNames.addAll(subjects);
    }

    public String getUsername(){ return username; }
    public boolean checkPassword(String pwd){ return password.equals(pwd); }
    public Set<String> getSubjectNames(){ return Collections.unmodifiableSet(subjectNames); }
    public void assignSubject(String subjectName){ subjectNames.add(subjectName); }

    @Override
    public void collectDetails(Scanner sc){
        System.out.print("Enter Teacher Username: ");
        username=sc.nextLine().trim();
        System.out.print("Enter Password: ");
        password=sc.nextLine().trim();
    }
}

// ================= Database: Teachers =================
class TeacherDatabase {
    private static final Map<String, Teacher> teachers = new HashMap<>();

    public static boolean registerTeacher(String username, String password, Collection<String> subjects){
        if(username==null || username.trim().isEmpty() || teachers.containsKey(username)) return false;
        teachers.put(username,new Teacher(username,password,subjects));
        return true;
    }

    public static Teacher authenticate(String username, String password){
        Teacher t = teachers.get(username);
        if(t!=null && t.checkPassword(password)) return t;
        return null;
    }

    public static List<Teacher> allTeachers(){ return new ArrayList<>(teachers.values()); }
}

// ================= Model: Result =================
class Result {
    private final String studentName;
    private final String subject;
    private final int score;
    private final int total;
    private final Date timestamp;

    public Result(String studentName,String subject,int score,int total){
        this.studentName=studentName;
        this.subject=subject;
        this.score=score;
        this.total=total;
        this.timestamp=new Date();
    }

    public String getStudentName(){ return studentName; }
    public String getSubject(){ return subject; }
    public int getScore(){ return score; }
    public int getTotal(){ return total; }
    public Date getTimestamp(){ return timestamp; }
}

// ================= Database: Results =================
class ResultDatabase {
    private static final List<Result> results = new ArrayList<>();
    public static void addResult(Result r){ results.add(r); }
    public static List<Result> getAll(){ return new ArrayList<>(results); }
}

// ================= Service: Quiz Mechanics =================
class QuizService {
    private final Scanner sc;
    public QuizService(Scanner sc){ this.sc=sc; }

    public void conductQuiz(Student student, SubjectQuiz subject){
        List<Question> questions = subject.getQuestions();
        if(questions.isEmpty()){
            System.out.println("No questions available for "+subject.getSubjectName());
            return;
        }

        int score=0;
        System.out.println("\nQuiz: "+subject.getSubjectName());
        System.out.println("----------------------------------------");

        for(int i=0;i<questions.size();i++){
            Question q = questions.get(i);
            q.shuffleOptions();
            System.out.println("\nQ"+(i+1)+": "+q.getQuestionText());
            List<String> opts=q.getOptions();
            for(int j=0;j<opts.size();j++) System.out.println((j+1)+") "+opts.get(j));

            int choice=-1;
            while(true){
                System.out.print("Your Answer (1-"+opts.size()+"): ");
                String line=sc.nextLine().trim();
                try{
                    choice=Integer.parseInt(line)-1;
                    if(choice>=0 && choice<opts.size()) break;
                }catch(Exception e){}
                System.out.println("Invalid input.");
            }

            if(q.isCorrect(choice)) score++;
        }

        System.out.println("\nQuiz Finished. Score: "+score+"/"+questions.size());
        ResultDatabase.addResult(new Result(student.getName(), subject.getSubjectName(), score, questions.size()));
    }
}

// ================= Controller: Handles all flows =================
class QuizController {
    private final Scanner sc;
    private final QuizService quizService;

    private static final String ADMIN_USER="admin";
    private static final String ADMIN_PASS="admin123";

    public QuizController(Scanner sc){
        this.sc=sc;
        this.quizService=new QuizService(sc);
    }

    // ----- ADMIN FLOW -----
    public void adminFlow(){
        System.out.print("Admin Username: ");
        String user=sc.nextLine().trim();
        System.out.print("Admin Password: ");
        String pass=sc.nextLine().trim();
        if(!ADMIN_USER.equals(user) || !ADMIN_PASS.equals(pass)){
            System.out.println("Invalid Admin credentials.");
            return;
        }

        while(true){
            System.out.println("\n-- ADMIN MENU --");
            System.out.println("1) Add Teacher");
            System.out.println("2) Add Subject");
            System.out.println("3) View All Teachers");
            System.out.println("4) View All Results");
            System.out.println("5) Logout");
            System.out.print("Enter choice: ");
            String ch=sc.nextLine().trim();

            switch(ch){
                case "1": addTeacherFlow(); break;
                case "2":
                    System.out.print("Enter new subject name: ");
                    String subName=sc.nextLine().trim();
                    SubjectDatabase.addSubject(subName);
                    System.out.println("Subject added.");
                    break;
                case "3":
                    List<Teacher> all=TeacherDatabase.allTeachers();
                    if(all.isEmpty()) System.out.println("No teachers found.");
                    else for(Teacher t:all)
                        System.out.println(t.getUsername()+" | Subjects: "+t.getSubjectNames());
                    break;
                case "4": viewResultsFlow("",true); break;
                case "5": return;
                default: System.out.println("Invalid choice.");
            }
        }
    }

    private void addTeacherFlow(){
        System.out.print("Enter Teacher Username: ");
        String username=sc.nextLine().trim();
        System.out.print("Enter Teacher Password: ");
        String password=sc.nextLine().trim();

        Set<String> assignedSubjects=new HashSet<>();
        if(SubjectDatabase.subjectCount()>0){
            System.out.println("Available Subjects:");
            SubjectDatabase.printSubjectList();
            System.out.print("Enter subject numbers assigned to this teacher (comma separated): ");
            String line=sc.nextLine().trim();
            for(String part:line.split(",")){
                try{
                    int idx=Integer.parseInt(part.trim());
                    SubjectQuiz s=SubjectDatabase.getByChoice(idx);
                    if(s!=null) assignedSubjects.add(s.getSubjectName());
                }catch(NumberFormatException e){
                    System.out.println("Ignored invalid input: "+part);
                }
            }
        } else System.out.println("No subjects available. Add subjects first.");

        boolean success=TeacherDatabase.registerTeacher(username,password,assignedSubjects);
        if(success) System.out.println("Teacher registered successfully with subjects: "+assignedSubjects);
        else System.out.println("Failed to register teacher (username may already exist).");
    }

    // ----- TEACHER FLOW -----
    public void teacherFlow(){
        System.out.print("Username: ");
        String user=sc.nextLine().trim();
        System.out.print("Password: ");
        String pass=sc.nextLine().trim();
        Teacher t=TeacherDatabase.authenticate(user,pass);
        if(t==null){ System.out.println("Login failed."); return; }

        while(true){
            System.out.println("\n-- TEACHER MENU --");
            System.out.println("1) Add Students");
            System.out.println("2) Add Quiz Question");
            System.out.println("3) View All Results");
            System.out.println("4) Logout");
            System.out.print("Enter choice: ");
            String ch=sc.nextLine().trim();
            switch(ch){
                case "1": addStudentsFlow(); break;
                case "2": addQuestionAsTeacher(t); break;
                case "3": viewResultsFlow("",true); break;
                case "4": return;
                default: System.out.println("Invalid choice.");
            }
        }
    }

    private void addStudentsFlow(){
        System.out.print("How many students to add? ");
        int count;
        try{ count=Integer.parseInt(sc.nextLine().trim()); }catch(Exception e){ System.out.println("Invalid."); return; }
        for(int i=1;i<=count;i++){
            System.out.print("Student "+i+" Name: ");
            String name=sc.nextLine().trim();
            if(StudentDatabase.addStudent(name)) System.out.println("Added "+name);
            else { System.out.println("Student exists/invalid."); i--; }
        }
    }

    private void addQuestionAsTeacher(Teacher t){
        if(t.getSubjectNames().isEmpty()){ System.out.println("No subjects assigned."); return; }
        System.out.println("Your Subjects: "+t.getSubjectNames());
        System.out.print("Enter subject name: ");
        String subjName=sc.nextLine().trim();
        if(!t.getSubjectNames().contains(subjName)){ System.out.println("Not assigned to this subject."); return; }
        SubjectQuiz subj=SubjectDatabase.getByName(subjName);
        if(subj==null){ System.out.println("Unknown subject."); return; }

        System.out.print("Enter Question Text: ");
        String text=sc.nextLine().trim();
        List<String> options=new ArrayList<>();
        for(int i=1;i<=4;i++){ System.out.print("Option "+i+": "); options.add(sc.nextLine().trim()); }
        System.out.print("Correct Option (1-4): ");
        int correct=Integer.parseInt(sc.nextLine().trim())-1;
        subj.addQuestion(new Question(text,options,correct));
        System.out.println("Question added to "+subj.getSubjectName());
    }

    // ----- STUDENT FLOW -----
    public void studentFlow(){
        System.out.print("Enter Student Name: ");
        String sName=sc.nextLine().trim();
        if(!StudentDatabase.exists(sName)){ System.out.println("Not registered."); return; }
        Student student=new Student(sName);

        while(true){
            System.out.println("\n-- STUDENT MENU --");
            System.out.println("1) Attempt Quiz");
            System.out.println("2) View My Results");
            System.out.println("3) Logout");
            System.out.print("Enter choice: ");
            String ch=sc.nextLine().trim();
            switch(ch){
                case "1":
                    if(SubjectDatabase.subjectCount()==0){ System.out.println("No subjects available."); break; }
                    System.out.println("Available Subjects:");
                    SubjectDatabase.printSubjectList();
                    System.out.print("Enter choice: ");
                    try{
                        int idx=Integer.parseInt(sc.nextLine().trim());
                        SubjectQuiz subj=SubjectDatabase.getByChoice(idx);
                        if(subj!=null) quizService.conductQuiz(student,subj);
                        else System.out.println("Invalid subject.");
                    }catch(Exception e){ System.out.println("Invalid input."); }
                    break;
                case "2": viewResultsFlow(sName,false); break;
                case "3": return;
                default: System.out.println("Invalid choice.");
            }
        }
    }

    // ----- VIEW RESULTS -----
    private void viewResultsFlow(String studentName, boolean isTeacher){
        System.out.println("\n---------------- RESULTS ----------------");
        List<Result> all=ResultDatabase.getAll();
        if(all.isEmpty()){ System.out.println("No results found."); }
        else for(Result r:all){
            if(isTeacher || r.getStudentName().equalsIgnoreCase(studentName)){
                String status=(r.getScore()*100/Math.max(1,r.getTotal()))>=50?"PASS":"FAIL";
                System.out.println(r.getStudentName()+" | Subject: "+r.getSubject()+" | Score: "+r.getScore()+"/"+r.getTotal()+" | Status: "+status+" | Date: "+r.getTimestamp());
            }
        }
        System.out.println("----------------------------------------\n");
    }
}

// ================= MAIN CLASS =================
public class Main {
    public static void main(String[] args){
        Scanner sc=new Scanner(System.in);
        QuizController controller=new QuizController(sc);

        System.out.println("======================================");
        System.out.println("       QUIZ SYSTEM (In-Memory) v3     ");
        System.out.println("======================================");

        StudentDatabase.addStudent("Alice");
        StudentDatabase.addStudent("Bob");

        while(true){
            System.out.println("\n1) Admin");
            System.out.println("2) Other (Teacher/Student)");
            System.out.println("3) Exit");
            System.out.print("Enter choice: ");
            String choice=sc.nextLine().trim();

            switch(choice){
                case "1": controller.adminFlow(); break;
                case "2":
                    System.out.println("1) Teacher Login\n2) Student Login");
                    System.out.print("Enter choice: ");
                    String c2=sc.nextLine().trim();
                    if(c2.equals("1")) controller.teacherFlow();
                    else if(c2.equals("2")) controller.studentFlow();
                    else System.out.println("Invalid choice.");
                    break;
                case "3":
                    System.out.println("Goodbye!");
                    sc.close();
                    return;
                default:
                    System.out.println("Invalid choice.");
            }
        }
    }
}
